all_samples=["TN2L_S1","TN3L_S3","TN2R_S2","TN3R_S4"]
reference="Heliconius_melpomene_melpomene_Hmel2.5.scaffolds.fa"

rule targets:
	input:
		expand("{sample}.bam",sample=all_samples),
		expand("{sample}.dedup.bam",sample=all_samples),
		"coverage_plot.png",
		expand("{sample}_spark.g.vcf.gz", sample=all_samples),
		"genotyped_cohort.vcf.gz"

rule prep_ref:
	input:
		"{reference}"
	output:
		support = "{reference}.pac"
	shell:
		"""
		bash prep_ref.sh {reference}
		"""

rule bwa_align:
	input:
		r1="{sample}_1.fastq.gz",
		r2="{sample}_2.fastq.gz",
	output:
		"{sample}.bam"
	shell:
		"""
		bash alignment.sh {reference} {input.r1} {input.r2} {wildcards.sample}
		"""

rule alignment_qc:
	input:
		"{sample}.bam"
	output:
		"{sample}.dedup.bam"
	shell:
		"""
		bash qc_alignment.sh "{wildcards.sample}"
		"""

bams=" ".join(expand("{sample}.dedup.bam",sample=all_samples))

rule plot_coverage:
	input:
		expand("{sample}.dedup.bam",sample=all_samples)	
	output:
		"coverage_plot.png"
	shell:
		"""
		bash plotcov.sh {bams}
		"""

rule per_sample_variant_calling:
	input:
		"{sample}.dedup.bam"
	output:
		"{sample}_spark.g.vcf.gz"
	shell:
		"""
		bash per_sample_variant_calling.sh {wildcards.sample} {reference}
		"""

gvcfs=" ".join(expand("{sample}",sample=all_samples))
rule joint_variant_calling:
	input:
		expand("{sample}_spark.g.vcf.gz",sample=all_samples)
	output:
		"genotyped_cohort.vcf.gz"
	shell:
		"""
		bash joint_variant_calling.sh {gvcfs}
		""" 
